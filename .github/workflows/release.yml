# Nome do Workflow
name: Build and Release Wails App

# Gatilhos (Triggers)
on:
  push:
    tags:
      - "v*" # Roda SOMENTE quando uma tag como v1.0.0 é enviada

jobs:
  # Job para compilar a aplicação para diferentes arquiteturas
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, 386] # Matriz para compilar para 64 e 32 bits

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Instalar Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Instalar PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Instalar Node.js
        uses: actions/setup-node@v4

      - name: Instalar dependências do frontend
        working-directory: frontend
        run: pnpm install

      - name: Compilar a aplicação (Build)
        # Compila o executável com um nome específico para a arquitetura
        run: wails build -o "Storage Openkore Latam-${{ matrix.arch }}.exe"
        shell: pwsh
        env:
          # Define a arquitetura de destino para o compilador do Go
          GOARCH: ${{ matrix.arch }}

      - name: Fazer upload do executável como artefato
        # Salva o .exe compilado como um artefato do workflow para ser usado depois
        uses: actions/upload-artifact@v4
        with:
          # Nome do artefato é único para cada arquitetura para evitar sobreposição
          name: build-artifact-${{ matrix.arch }}
          path: Storage Openkore Latam-${{ matrix.arch }}.exe

  # Job para criar o Release no GitHub
  release:
    # Este job só começa depois que todos os jobs de 'build' terminarem com sucesso
    needs: build
    runs-on: ubuntu-latest # Pode ser ubuntu, pois só vai lidar com arquivos

    # Condição: SÓ RODA SE O WORKFLOW FOI ACIONADO POR UMA TAG
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Criar diretório para os artefatos
        # Garante que o diretório de destino exista antes de tentar baixar os arquivos.
        # Isso evita o erro "No such file or directory".
        run: mkdir -p dist

      - name: Baixar todos os artefatos de build
        # Baixa todos os artefatos salvos pelo job 'build'
        uses: actions/download-artifact@v4
        with:
          # O diretório de destino para os arquivos baixados
          path: dist

      - name: Verificar arquivos baixados (opcional)
        # Lista os arquivos para garantir que o download funcionou
        run: ls -R dist

      - name: Criar e Publicar Release
        # Usa a action para criar um release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          # Anexa todos os arquivos .exe encontrados no diretório 'dist' e suas subpastas
          files: dist/**/*.exe
        env:
          # O token é necessário para dar permissão à action para criar o release
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
